Parte 1: Script Bash/Python para Monitoramento de Processo
 Passo 1: Preparar o Script
  Você pode escolher entre um script em Bash ou Python. Vou explicar os dois.

Em Bash:

1 - Abra um editor de texto no seu computador (como o Notepad++ ou o terminal no Linux/Mac).
2 - Copie e cole o seguinte código:

#!/bin/bash

if [ -z "$1" ]; then
  echo "Uso: $0 <process_name_or_pid>"
  exit 1
fi

while true; do
  if ps -p $1 > /dev/null; then
    CPU=$(ps -p $1 -o %cpu=)
    MEM=$(ps -p $1 -o %mem=)
    echo "CPU: $CPU%, MEM: $MEM%"
  else
    echo "Processo $1 não encontrado."
    exit 1
  fi
  sleep 5
done

3 - Salve o arquivo como monitor.sh.
3.1- chmod +x monitor.sh
3.2- p/ testar pegue um nº de um processo rodando na máquina com ps e execute 

./monitor.sh <pid>


-----------------------------------------

Em Python:

1 - Abra um editor de texto.
2 - Copie e cole o seguinte código:


import sys
import time
import psutil

if len(sys.argv) < 2:
    print("Uso: python monitor.py <process_name_or_pid>")
    sys.exit(1)

process_identifier = sys.argv[1]

try:
    process = psutil.Process(int(process_identifier))
except ValueError:
    process = None
    for proc in psutil.process_iter(['pid', 'name']):
        if process_identifier == proc.info['name']:
            process = psutil.Process(proc.info['pid'])
            break

if not process:
    print(f"Processo {process_identifier} não encontrado.")
    sys.exit(1)

while True:
    cpu_usage = process.cpu_percent(interval=1)
    memory_info = process.memory_info().rss / (1024 * 1024)
    print(f"CPU: {cpu_usage}%, MEM: {memory_info:.2f}MB")
    time.sleep(4)



4 - Salve o arquivo como monitor.py.
4.1 - chmod +x monitor.py
4.3 - p/ testar pegue um nº de um processo rodando na máquina com ps e execute
root@desafio-docker:/home/regis/flask_app# python3 monitor.py 13390
CPU: 0.0%, MEM: 5.33MB
CPU: 0.0%, MEM: 5.33MB
CPU: 0.0%, MEM: 5.33MB
-----------------------------------------

# Passo 2: Criar a máquina Azure

1. Acessar o Portal Azure:

 Acesse portal.azure.com
 Faça login com sua conta.

2. Criar uma VM no Azure para rodar o script:

 No portal, vá e pesquisa e pesquise por ubuntu (escolhi Ubuntu Server 20.04 LTS)
 Clique em "create" 
 Subscription*   Fre Trial (p/ meu caso pois criei uma conta para esse desafio)
 Resource group* --> clique em "Create new" (pois não criei um anteriormente e dê um nome (nome ---> lab-desafio-docker))
 Virtual machine name --> lab-desafio-docker
 Region		(South America) Brazil South
 Availability options Availability zone
 Security type standard (pois é pra lab)
 VM architecture x86
 Size Standard_D2s_v3 - 2 vcpus, 8 GiB memory (US$ 116,07/month) (não aceita o mais básico)
 Authentication type Password
 Username regis
 Password ***********
 Confirm password **********
 Select inbound ports --> Marque todas HTTP (80), HTTPS (443), SSH (22)
 Review + create
 
 Após isso procure pelo IP publico e tente acesso via ssh 
Obs: não aceita ping, pacotes icmp
 ssh <seu_usuario>@<endereço_IP_Publico_da_VM>

4. Fazer Upload dos Scripts para a VM:
Acesse via ssh no moba, ele tem um modo de envio ftp, o caminho de onde esta tudo esta em:
D:\Entrevistas-e-Labs-de-entrevistas\flask_app.tar.gz

diponibilize em seu dir home
/home/regis/flask_app.tar.gz 
descompacte
 tar -xzvf flask_app.tar.gz 

5. Executar o Script:

1- Torne executavel os scrpts e rode:
entre dendo de /home/regis/flask_app
chmod +x monitor.sh
./monitor.sh <nome_do_processo_ou_PID>


Para Python: Instale a biblioteca psutil e execute o script python:

sudo apt-get update
sudo apt-get install python3-pip
pip3 install psutil

python3 monitor.py <nome_do_processo_ou_PID>

---------
Passo 2: Configurar Docker no Azure

Instalar o Docker na VM do Azure:

Conecte-se à VM (como feito anteriormente).

Execute os comandos para instalar o Docker:
sudo apt-get update
sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update
sudo apt-get install docker-ce



Verifique a instalação:

# docker --version



Passo 3. Construir a Imagem Docker:
No terminal da VM, navegue até a pasta flask_app:

# cd ~/flask_app

Construa a imagem Docker:
#docker build -t flask-app .


4. Rodar o Contêiner:
Execute o contêiner com o comando:
# docker run -p 5000:5000 flask-app
ou
# docker run -p 80:5000 flask-app
5. Acessar a Aplicação:
Execute o contêiner com o comando:

http://<endereço_IP_Publico_da_VM>:5000



Você deverá ver a mensagem: ]
"Olá, João! A aplicação que solicitou Flask está rodando dentro do contêiner."

Caso não acesse verifique a segurança da vm, se alguma coisa esta bloqueando a vm!!


Após isso delete a vm para não insidir encargos 






























































































